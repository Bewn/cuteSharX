From b210b16f849afbf8ab15eadf0b56d7fd30e36365 Mon Sep 17 00:00:00 2001
From: Luke Shumaker <lukeshu@lukeshu.com>
Date: Tue, 13 Jun 2017 16:59:47 -0400
Subject: [PATCH 14/38] nspawn: if !cg_ns_supported() then force arg_use_cgns =
 false

It's silly that every time we check arg_use_cgns we also have to check
cg_ns_supported().

So, simplify these checks and force arg_use_cgns = false if the kernel
doesn't support cg_ns_supported.
---
 src/nspawn/nspawn.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/nspawn/nspawn.c b/src/nspawn/nspawn.c
index 96ea27e57c..7fddee8808 100644
--- a/src/nspawn/nspawn.c
+++ b/src/nspawn/nspawn.c
@@ -1379,7 +1379,7 @@ static int parse_argv(int argc, char *argv[]) {
         if (r < 0)
                 arg_use_cgns = cg_ns_supported();
         else
-                arg_use_cgns = r;
+                arg_use_cgns = r && cg_ns_supported();
 
         r = custom_mount_check_all();
         if (r < 0)
@@ -2601,7 +2601,7 @@ static int inner_child(
                 return -ESRCH;
         }
 
-        if (arg_use_cgns && cg_ns_supported()) {
+        if (arg_use_cgns) {
                 r = unshare(CLONE_NEWCGROUP);
                 if (r < 0)
                         return log_error_errno(errno, "Failed to unshare cgroup namespace: %m");
@@ -3065,7 +3065,7 @@ static int outer_child(
         if (r < 0)
                 return r;
 
-        if (!arg_use_cgns || !cg_ns_supported()) {
+        if (!arg_use_cgns) {
                 r = mount_cgroups(
                                 directory,
                                 arg_inner_cgver,
-- 
2.18.0

